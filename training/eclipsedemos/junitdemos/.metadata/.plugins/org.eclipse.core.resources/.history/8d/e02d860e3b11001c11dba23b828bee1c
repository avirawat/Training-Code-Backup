package com.bookapp.testcases;


import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;

import com.bookApp.Repository.IBookRepository;
import com.bookApp.exceptions.InvalidDataException;
import com.bookApp.model.Book;
import com.bookApp.service.BookServiceImpl;

@ExtendWith(MockitoExtension.class)
@RunWith(MockitoJUnitRunner.class)
class BookServiceTest {

	@Mock 
	IBookRepository repository;
	
	@InjectMocks
	BookServiceImpl bookService;
	
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
	}
	List<Book> bookList;
	Book book1,book2,book3,book4,book5;
	@BeforeEach
	void setUp() throws Exception {
		bookService=new BookServiceImpl();
		bookService.setBookRepo(repository);
		book1=new Book("java","kathy","Tech",1900);
	    book2=new Book("Spring","kathy","Tech",800);
		book3=	new Book("javac","kathy","Tech",900);
		book4=	new Book("Leadership","kathy","Tech",1800);
		book5=	new Book("miracle","Hal","Tech",500);
		bookList=Arrays.asList(book1,book2,book3,book4,book5);

	}

	@AfterEach
	void tearDown() throws Exception {
	}
	 
	@Test
	@DisplayName("text add book")
	void textAddBook() throws Exception{
		when(repository.addBook(book1)).thenReturn(1);
		assertEquals(1,bookService.addBook(book1),"not added");
	}
	
	@Test
	@DisplayName("text add book Exception")
	void textAddErrorBook() throws Exception{
		when(repository.addBook(book1)).thenThrow(Exception.class);
		assertThrows(InvalidDataException.class,()->bookService.addBook(book1));
	}
	
	@Test
	@DisplayName("text update Book +ve")
	void textUpdateBook() {
		doNothing().when(repository).updateBook(1,800);
		assertEquals("updated",bookService.updateBook(1, 800));
		
	}
	
	@Test
	@DisplayName("text update Book -ve")
	void textUpdateNegBook() {
		//doNothing().when(repository).updateBook(-2,800);
		assertEquals("invalid",bookService.updateBook(-1, 800),"not same");
		
	}
	
	@Test
	@DisplayName("text delete Book +ve ")
	void textDeleteBook() {
		doNothing().when(repository).deleteBook(1);
		assertTrue(bookService.deleteBook(1));
		
	}
	@Test
	@DisplayName("text delete Book -ve ")
	void textErrorBook() {
		doNothing().when(repository).deleteBook(1);
		assertFalse(bookService.deleteBook(1));
		
	}
	
}
